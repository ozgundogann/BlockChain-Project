{"ast":null,"code":"import Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider);\nasync function printHelloWorld() {\n  const accounts = await web3.eth.getAccounts();\n  console.log(accounts);\n  const address = \"0x97C663fbf86f09C582eF2e097227d34fD312dB78\";\n  const abi = [{\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  }, {\n    \"inputs\": [],\n    \"name\": \"getHelloMessage\",\n    \"outputs\": [{\n      \"internalType\": \"string\",\n      \"name\": \"\",\n      \"type\": \"string\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [],\n    \"name\": \"helloMessage\",\n    \"outputs\": [{\n      \"internalType\": \"string\",\n      \"name\": \"\",\n      \"type\": \"string\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }];\n  const contract = new web3.eth.Contract(abi, address);\n  try {\n    const helloMessage = await contract.methods.getHelloMessage().call();\n    console.log(\"Hello Message:\", helloMessage);\n  } catch (error) {\n    console.error(\"Error calling getHelloMessage:\", error);\n  }\n}\n\n// Check if MetaMask is available\nif (window.ethereum) {\n  // Request Ethereum accounts from MetaMask\n  window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  }).then(() => printHelloWorld());\n} else {\n  alert(\"Install MetaMask extension!!\");\n}","map":{"version":3,"names":["Web3","web3","givenProvider","printHelloWorld","accounts","eth","getAccounts","console","log","address","abi","contract","Contract","helloMessage","methods","getHelloMessage","call","error","window","ethereum","request","method","then","alert"],"sources":["C:/Users/ozgun/frontend/src/App.js"],"sourcesContent":["import Web3 from 'web3';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nasync function printHelloWorld() {\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n\n    const address = \"0x97C663fbf86f09C582eF2e097227d34fD312dB78\"; \n    const abi =[\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"getHelloMessage\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"helloMessage\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\n\n    const contract = new web3.eth.Contract(abi, address);\n\n    try {\n        const helloMessage = await contract.methods.getHelloMessage().call();\n        console.log(\"Hello Message:\", helloMessage);\n    } catch (error) {\n        console.error(\"Error calling getHelloMessage:\", error);\n    }\n}\n\n// Check if MetaMask is available\nif (window.ethereum) {\n    // Request Ethereum accounts from MetaMask\n    window.ethereum\n        .request({ method: \"eth_requestAccounts\" })\n        .then(() => printHelloWorld());\n} else {\n    alert(\"Install MetaMask extension!!\");\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,MAAMC,IAAI,GAAG,IAAID,IAAI,CAACA,IAAI,CAACE,aAAa,CAAC;AAEzC,eAAeC,eAAeA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAG,CAACC,WAAW,CAAC,CAAC;EAC7CC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAErB,MAAMK,OAAO,GAAG,4CAA4C;EAC5D,MAAMC,GAAG,GAAE,CACd;IACC,QAAQ,EAAE,EAAE;IACZ,iBAAiB,EAAE,YAAY;IAC/B,MAAM,EAAE;EACT,CAAC,EACD;IACC,QAAQ,EAAE,EAAE;IACZ,MAAM,EAAE,iBAAiB;IACzB,SAAS,EAAE,CACV;MACC,cAAc,EAAE,QAAQ;MACxB,MAAM,EAAE,EAAE;MACV,MAAM,EAAE;IACT,CAAC,CACD;IACD,iBAAiB,EAAE,MAAM;IACzB,MAAM,EAAE;EACT,CAAC,EACD;IACC,QAAQ,EAAE,EAAE;IACZ,MAAM,EAAE,cAAc;IACtB,SAAS,EAAE,CACV;MACC,cAAc,EAAE,QAAQ;MACxB,MAAM,EAAE,EAAE;MACV,MAAM,EAAE;IACT,CAAC,CACD;IACD,iBAAiB,EAAE,MAAM;IACzB,MAAM,EAAE;EACT,CAAC,CACD;EAEG,MAAMC,QAAQ,GAAG,IAAIV,IAAI,CAACI,GAAG,CAACO,QAAQ,CAACF,GAAG,EAAED,OAAO,CAAC;EAEpD,IAAI;IACA,MAAMI,YAAY,GAAG,MAAMF,QAAQ,CAACG,OAAO,CAACC,eAAe,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IACpET,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,YAAY,CAAC;EAC/C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZV,OAAO,CAACU,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;EAC1D;AACJ;;AAEA;AACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;EACjB;EACAD,MAAM,CAACC,QAAQ,CACVC,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAsB,CAAC,CAAC,CAC1CC,IAAI,CAAC,MAAMnB,eAAe,CAAC,CAAC,CAAC;AACtC,CAAC,MAAM;EACHoB,KAAK,CAAC,8BAA8B,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}